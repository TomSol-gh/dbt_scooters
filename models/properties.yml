version: 2

sources:
  - name: "scooters_raw"
    description: "Raw data provided by scooter service"
    loader: "https://t.me/inzhenerka_dbt_bot"
    tables:
      - name: "trips"
        description: "Scooter trips"
        freshness: 
          error_after:
            count: 730
            period: day
          warn_after:
            count: 1
            period: day
        loaded_at_field: "finished_at at time zone 'UTC'"
        columns:
          - name: "user_id"
            description: "User identifier"
            tests:
              - not_null
              - relationships:
                  name: "every_trip_has_user"
                  field: "id"
                  to: "source('scooters_raw', 'users')"
        
      - name: "users"
        description: "Users of scooter service"
        columns:
          - name: "sex"
            description: "User gender"
            tests:
              - accepted_values:
                  values:
                    - "M"
                    - "F"
              - not_null:
                  config:
                    severity: "warn"
                                    
      - name: "events"
        description: "User events"
        columns:
          - name: "user_id"
            description: "User identifier"
            tests:
              - not_null
              - relationships:
                  name: "every_trip_has_user"
                  field: "id"
                  to: "source('scooters_raw', 'users')"

models:
  - name: "trips_prep"
    description: "Updated scooter trips info"
    config:
      materialized: view
    tests:
      - row_count_same:
          compare_model: "source('scooters_raw', 'trips')"

  - name: "trips_stat"
    description: "Overall trips statistics"

  - name: "trips_stat_daily"
    description: "Daily trips statistics"
    config:
      indexes:
        - columns: ['date']

  - name: "trips_age_daily"
    description: "Data prepered for daily statistics by age groups"
    tests:
      - unique:
          column_name: "(date::text || age::text)"
      - unique_key:
          columns: ["date", "age"]

  - name: "trips_age_daily_stat"
    description: "Daily trips and revenue statistics by age groups"
  - name: "trips_geom"
    description: "Trips starting and ending points"
    config:
      materialized: view

  - name: "parking_start_stat"
    description: "500 meters precision hexagons for starting points"

  - name: "parking_finish_stat"
    description: "10 meters precision hexagons for finishing points"

  - name: "trips_users"
    description: "Trips data with users info"
    config:
      materialized: incremental
      post-hook: 
        - "analyze dbt.trips_users"
        - sql: "vacuum dbt.trips_users"
          transaction: false

  - name: "events_clean"
    description: "Distinct user events"
    config:
      materialized: incremental
      strategy: merge
      unique_key: ["user_id", "timestamp", "type_id"]
  - name: "trip_concurrency"
    description: "Concurrent trips"
    config:
      materialized: incremental

  - name: "compamies"
    description: "Aggregated info about scooters"

  - name: "companies_trips"
    description: "Statistic by manufacture companies"
    columns:
      - name: "company"
        description: "Company name"
        tests:
          - unique
          
  - name: "events_full"
    description: "Distinct user events with meaningful types"
    config:
      materialized: view
      meta:
        unique_key: [ "user_id", "timestamp", "type_id" ]
        testing:
          days_max: 60
    data_tests: [ "unique_key_meta"]

  - name: "events_stat"
    description: "Cancel requests statistics"

  - name: "trips_age_group"
    description: "Statistics by user groups"

  - name: "users_full"
    description: "Users with no missing values in sex field"

  - name: "events_prep"
    description: "User events prepared for following processing"
    config:
      materialized: view
    columns:
      - name: "date"
        description: |
          Date of event derived from timestamp.
          Imitates Hive-styled partitioning of events by date.
          It is needed for efficient incremental processing by engines
          with partitioning support (i.e. Trino).
  
  - name: "events_clean_v2"
    description: "User events without duplicates"
    config:
      materialized: "incremental"
      strategy: "merge"
      unique_key: [ "user_id", "timestamp", "type_id" ]
      meta:
        owner: "Igor Dushnin"
        incrementality:
          start_date: "2023-06-01"
          days_max: 60
  
  - name: "sex_age_pivot"
    description: "Trips per age pivoted by sex"
    tests:
      - unique_key:
          columns: ["age"]
      - dbt_expectations.expect_table_column_count_to_equal:
          value: 3
    columns:
      - name: "age"
        description: "Numerical  age of user"
        tests:
          - dbt_utils.not_constant

    



